\documentclass[twocolumn,10pt]{scrreprt}
\usepackage[a3paper, twocolumn, landscape, top = 10mm, bottom = 10mm, left = 2cm, right = 2cm]{geometry}
\addtolength{\columnsep}{15pt}
\usepackage{graphicx}
%\setmainfont{Arial}


\makeatletter

\g@addto@macro\@floatplacement{%
\if@firstcolumn
\global\@colnum\z@
\fi
}

\makeatother


\begin{document}
<<knitrOpts>>=
library(knitr)
knitr::opts_chunk$set(fig.show = "hide",
                      fig.path = 'atlas/',
                      fig.width = 11, 
                      fig.height = 7,
                      tidy = FALSE,
                      #message = FALSE,
                      out.width = "11in",
                      out.height = "7in")
@

<<packages>>=
library(directlabels)
library(ggplot2)
library(scales) 
library(grattan)
library(tidyr)
library(dplyr)
library(readr)
library(magrittr)
library(lubridate)
@

<<helper-functions>>=
.simpleCap <- function(x) {
    s <- strsplit(x, " ")[[1]]
    paste(toupper(substring(s, 1, 1)), substring(s, 2),
          sep = "", collapse = " ")
}
@

\eject
\phantom{.}
\newpage

<<Grattan-Palette>>=
p <- grplot(NULL)
for (y in 1:6){
  for (x in 1:6){
    p <- p + annotate("rect", 
                      xmin = x - 1, xmax = x, 
                      ymin = y - 0.99, ymax = y, 
                      fill = gpal(y)[x])
  }
}
p +
  scale_y_continuous("With this number of categories", 
                     breaks = 0:6 + 0.5, labels = 1:7, limits = c(0,6)) + 
  scale_x_continuous("\\dots\\ colour the $n$th entry this colour.")
@
\eject
\includegraphics[width=\columnwidth]{atlas/Grattan-Palette-1}
\newpage
<<Grattan-Palette-greys>>=
p <- grplot(NULL)
x <- 0
for (gray in c(217,174,130,87,43,0)/256){
  x <- x + 1
  p <- p + annotate("rect", xmin = x - 1, xmax = x, ymin = 0.5, ymax = 1.5, 
                    fill = rgb(gray, gray, gray)) + 
    coord_equal() + 
    theme_void()
}
p
@
\eject
\includegraphics[width=\columnwidth]{atlas/Grattan-Palette-greys-1}
\newpage
\section{Bar charts}
<<bar-chart>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.7)
@
\vfil
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart-1}
\newpage
\subsection{Axes flush with data}
<<bar-chart2>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.7) + 
  
  
  # To adjust the spacing between the axes, use expand = c(0,0)
  scale_y_continuous(expand = c(0,0))
@
\vfil
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart2-1}
\newpage
\subsection{Add legend}
<<bar-chart3>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.7) + 
  
  
  # To adjust the spacing between the axes, use expand = c(0,0)
  scale_y_continuous(expand = c(0,0)) + 
  
  # Include a legend:
  # Without the following, we get `factor(Year)` as the
  # legend title. This sets the legend title.
  guides(fill = guide_legend("Year")) + 
  theme(legend.position = "right")
@
\vfil
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart3-1}
\newpage
\subsection{Add legend over plot}
<<bar-chart4>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.7) + 
  
  
  # To adjust the spacing between the axes, use expand = c(0,0)
  scale_y_continuous(expand = c(0,0)) + 
  
  # Include a legend:
  # Without the following, we get `factor(Year)` as the
  # legend title. This sets the legend title.
  guides(fill = guide_legend("Year")) + 
  # you can also adjust the legend position ranged
  # c(0,0) = southwest corner 
  # c(1,0) = southeast corner
  # c(0,1) = northwest corner
  # c(1,1) = northeast corner
  # ranged between
  theme(legend.position = c(0.8, 0.8), 
        # play with unit(<width> , "lines")
        legend.text = element_text(size = 23),
        legend.key.size = unit(2, "lines"))
@
\vfil
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart4-1}
\newpage
\subsection{Adding space for legend}
<<bar-chart5>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.7) + 
  
  
  # To adjust the spacing between the axes, use expand = c(0,0)
  scale_y_continuous(expand = c(0,0)) + 
  
  # Include a legend:
  # Without the following, we get `factor(Year)` as the
  # legend title. This sets the legend title.
  guides(fill = guide_legend("Year")) + 
  # you can also adjust the legend position ranged
  # c(0,0) = southwest corner 
  # c(1,0) = southeast corner
  # c(0,1) = northwest corner
  # c(1,1) = northeast corner
  # ranged between
  theme(legend.position = c(0.9, 0.9), 
        # play with unit(<width> , "lines")
        legend.text = element_text(size = 23),
        legend.key.size = unit(2, "lines")) +
  #
  # you can use blank annotations to expand the axis
  annotate("blank", 
           x = 5.5, 
           y = NA_real_)
@
\vfil
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart5-1}
\newpage
\subsection{Coloured text as legend}
<<bar-chart6>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  #
  # add a label variable. Exploit the fact that if any
  # variable is NA then the text will not be plotted.
  mutate(text.label = ifelse(as.numeric(City) == max(as.numeric(City)), 
                             as.character(Year), 
                             NA_character_),
         text.x = as.numeric(factor(City)) + 0.75) %>%
  group_by(City) %>%
  mutate(text.y = cumsum(value)) %>%
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.7) + 
  
  
  # To adjust the spacing between the axes, use expand = c(0,0)
  scale_y_continuous(expand = c(0,0)) + 
  
  # Alternatively, we can use geom_text to place text
  geom_text(aes(x = text.x, y = text.y, 
                label = text.label, color = factor(Year)), 
            size = 23/(14/5), 
            hjust = 1,
            fontface = "bold")
@
\vfil
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart6-1}
\newpage
\subsection{``Dodged'' bar charts}
<<bar-chart-dodge>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
  # First we need to 'tidy' our data from 
  # 'wide' (which it is now) to 'long'. 
  # ggplot (and hence grplot) requires every 
  # row to refer to a single data point ---
  # i.e. a single bar
  tidyr::gather(Year, value, -City) %>%
  # Year needs to be factor(Year) so that the colours 
  # are distinctive -- leaving it makes the colors be
  # elements on a range 1994-1996
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.9,
           # position = "dodge"
           position = "dodge")
@
\phantom{.}
\vfill
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart-dodge-1}
\newpage
\subsection{Order bars}
<<bar-chart-order-bars>>=
read.table(text ="
City 	1994	1995	1996
Sydney	4.3	2.4	1.9
Melbourne	2.5	4.4	2.1
Brisbane	3.5	1.8	3
Adelaide	4.5	2.8	4.9
", header = TRUE,
check.names = FALSE) %>%
 
  
  
  
  tidyr::gather(Year, value, -City) %>%
  # 
  # 
  # 
  # use levels IMMEDIATELY before grplot to reorder bars.
  mutate(City = factor(City, 
                       levels = c("Sydney", 
                                  "Melbourne", 
                                  "Brisbane", 
                                  "Adelaide"))) %>%
  
  grplot(aes(x = City, y = value, fill = factor(Year))) +
  # set stat = "identity" so that the height of the bar
  # represents values, not counts of entries
  geom_bar(stat = "identity", width = 0.9,
           # position = "dodge"
           position = "dodge")
@
\phantom{.}
\vfill
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart-order-bars-1}
\newpage
\subsection{Stacked (filled) bar charts}
<<stack-fill-bar>>=
read.table(text = "
Degree 	Full-time	Part-time	Away from work	Unemployed	Not in LF
Diploma and advanced diploma	60.48452522	20.27784088	5.035534013	3.029462697	11.17263719
Bachelor degree	66.85055608	18.26301611	5.480946866	2.121800946	7.283680001
", header = TRUE, sep = "\t") %>%
  tidyr::gather(Status, value, -Degree) %>%
  mutate(Degree = factor(Degree, levels = c("Bachelor degree", "dummy", "Diploma and advanced diploma"))) %>%
  grplot(aes(x = Degree,
             y = value, fill = Status)) + 
  geom_bar(stat = "identity", position = "fill", width = 0.5)
@
\phantom{.}
\vfill
\eject
\includegraphics[width=\columnwidth]{atlas/stack-fill-bar-1}
\newpage
\subsection{New colors}
<<stack-fill-bar-manual-colors>>=
read.table(text = "
Degree 	Full-time	Part-time	Away from work	Unemployed	Not in LF
Diploma and advanced diploma	60.48452522	20.27784088	5.035534013	3.029462697	11.17263719
Bachelor degree	66.85055608	18.26301611	5.480946866	2.121800946	7.283680001
", header = TRUE, sep = "\t") %>%
  tidyr::gather(Status, value, -Degree) %>%
  mutate(Degree = factor(Degree, 
                         levels = c("Bachelor degree", 
                                    "dummy", 
                                    "Diploma and advanced diploma"),
                         labels = c("Bachelor degree", 
                                    "dummy", 
                                    "Diploma and\nadvanced diploma"))) %>%
  grplot(aes(x = Degree,
             y = value, fill = Status)) + 
  geom_bar(stat = "identity", position = "fill", width = 0.5) + 
  scale_fill_manual(values = c(gpal(6)[1:4], "black")) + 
  scale_x_discrete(expand = c(0.10,0.075)) + 
  # get rid of the x-axis title (and the space allocated thereto)
  theme(axis.title = element_blank()) + 
  # make data flush with plot background
  # and the axis "%"
  scale_y_continuous(expand = c(0,0), 
                     label = percent) + 
  annotate("text", 
           x = 1.5,
           # Probably best to manually position text here!
           y = c(0.4, 0.735, 0.8465, 0.92, 0.97), 
           color = c(gpal(6)[1:4], "black"),
           fontface = "bold",
           size = 23/(14/5),
           # Note use of \n to signify a new line
           label = c("Employed\nFull-time", 
                     "Employed\nPart-time", 
                     "Employed\naway from work", 
                     "Unemployed", 
                     "Not in LF"),
           lineheight = 0.8)
  
@
\phantom{.}
\vfill
\eject
\includegraphics[width=\columnwidth]{atlas/stack-fill-bar-manual-colors-1}
\newpage
\section{Labels so to appear as outside the chart (clip $x$-axis)}

<<stacked-bar-chart2, warning=FALSE>>=
read.table(text="Column1	NSW	VIC	QLD	SA	WA	Other
2007	779	828	475	1,037	262	99
2008	2,890	2,036	3,087	3,456	2,068	527
2009	14,008	8,429	18,283	8,569	11,157	2470
2010	69,988	35,676	48,697	16,705	22,293	4849
2011	80,272	60,214	95,303	63,553	51,667	9736
2012	53,961	66,204	130,252	41,851	42,653	8399
2013	33,998	33,332	71,197	29,187	21,600	11093
2014	36,377	39,305	56,952	14,932	23,249	6353
", header = TRUE) %>%
  tidyr::gather(State, value, -Column1) %>% 
  mutate(Year = Column1,
         State = factor(State, 
                        labels = c("NSW", "Vic.", "Qld", "SA", "WA", "Other"))) %>%
  mutate(value = as.numeric(gsub(",", "", value))) %>% 
  # text
  mutate(text.x = max(as.numeric(factor(Year))) + 0.65,
         text.label = ifelse(Year == max(Year), as.character(State), NA_character_)) %>%
  group_by(Year) %>%
  mutate(text.y = value/2 + lag(cumsum(value), default = 0)) %>%
  {
    grplot(.) + 
      geom_bar(aes(x = factor(Year), fill = State, y = value),
               stat = "identity", position = "stack", width = 0.75) + 
      scale_y_continuous("Value (000's)", expand = c(0,0),
                         limits = c(0, 400e3),
                         labels = function(x)comma(x/1e3)) + 
      geom_text(aes(x = text.x, y = text.y, label = text.label, color = State),
                hjust = 0,
                # reduced size (from 23)
                size = 20/(14/5),
                fontface = "bold") + 
      annotate("blank", x = max(as.numeric(factor(.$Year))) + 1.5, y = mean(.$value)) + 
      theme(axis.title.x = element_blank(), 
            axis.title.y = element_text(angle = 90, 
                                        # set margin thus to prevent collision with
                                        # axis ticks
                                        margin = margin(1,10,1,1)),
            # The next steps make the axis line end at the data, 
            # before the labels
            axis.line.x = element_blank()) + 
      annotate("segment", x = -Inf, xend = as.numeric(factor(.$Year)) + 0.5, 
               y = 0, yend = 0,
               color = "black")
  }
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/stacked-bar-chart2-1}
\newpage
\subsection{}
<<alternative-dodge-chart>>=
read.table(text="Column1	1986	1991	1996	2001	2006	2011
15-19	2600	7179	3464	3263	1910	1306
20-24	30232	24438	24515	25128	24471	22930
25-34	34207	31548	33085	36905	38943	41806
35-44	34466	33185	33538	36406	38789	43356
45-54	30664	30075	32387	36166	39013	42489
55-64	16680	17073	15973	20916	25884	30437
65-74	13378	13057	14190	15625	15712	18662
75-84	0	13132	14324	16103	15505	17565
85+	0	0	0	0	15017	17894
", header = TRUE, check.names = FALSE) %>%
  tidyr::gather(Year, value, -Column1) %>%
  grplot(aes(x = Column1, y = value, fill = Year)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.9) +
  theme(legend.position = c(0.9, 0.8),
        # x-axis clear by context
        axis.title.x = element_blank()) + 
  scale_y_continuous(expand = c(0,0), limits = c(0, 50e3), label = comma)
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/alternative-dodge-chart-1}
\newpage
\section{Rowwise charts (flipped bar charts)}
<<flipped-bar-chart>>=
read.table(text="Intervention 	Effect size
Formative evaluation	0.9
Feedback	0.73
Formative assessment	0.55
Prior achievement	0.67
Socioeconomic status	0.57
Pre-term birth weight	0.54
Decreasing disruptive behavior	0.34
Class size	0.21
", sep = "\t", header=TRUE) %>%
  mutate(is_Proposed_intervention = Intervention %in% c("Formative evaluation",
                                                        "Feedback", 
                                                        "Formative assessment"),
         
         Intervention = factor(Intervention, 
                               levels = .$Intervention,
                               # if the label is too long, replace the first space
                               # with a newline
                               labels = ifelse(nchar(as.character(Intervention)) > 25, 
                                               sub("\\s", "\n", as.character(Intervention)),
                                               as.character(Intervention)))) %>%
  # The following says "plot in reverse of current order"
  mutate(Intervention = factor(Intervention, levels = rev(.$Intervention))) %>%
  
  # note `Effect size`  is now `Effect.size`
  grplot(aes(x = Intervention, y = Effect.size)) + 
  geom_bar(stat = "identity", width = 0.9, aes(fill = is_Proposed_intervention)) +
  # dark palette
  scale_fill_manual(values = rev(gpal(2, dark = TRUE))) + 
  scale_y_continuous("Effect size",
                     expand = c(0,0), 
                     limits = c(0,1.5), 
                     breaks = seq(0, 1, by = 0.2)) + 
  coord_flip() + 
  # grid lines go the wrong way!
  theme(panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_line()) + 
  annotate("text", x = c(7, 3), y = 1.5, 
           label = c("Proposed\ninterventions",
                     "Other\nfactors"),
           color = gpal(2,T),
           hjust = 1, 
           size = 23/(14/5),
           fontface = "bold",
           lineheight = 0.8) + 
  geom_hline(yintercept = 0.4, size = 2) + 
  # arrow
  annotate("segment", y = 0.8, yend = 0.43, x = 1, xend = 1,
           size = 1.1
           # basic arrow (bit curvy for my liking)
#            arrow = arrow(length = unit(0.5, "lines"),  # size of arrowhead
#                          type = "closed")
           ) + 
  annotate("text", x = 1, y = 0.95, size = 20/(14/5),
           lineheight = 0.8,
           label = "Benchmark\neffect size") + 
  # arrowhead
  annotate("polygon", x = c(1, 0.9, 1.1), y = c(0.41, 0.44, 0.44), fill = "black")
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/flipped-bar-chart-1}
%
\newpage
\section{Bar chart signed colours}
<<bar-chart-signed-color>>=
read.table(text="Sector	Value Added
Gas	18.683
Construction and Trade	3.73
Services	0.483
Electricity and Water	-0.302
Agriculture	-0.43
Transport	-0.652
Mining	-2.756
Manufacturing	-3.247
", header = TRUE, sep = "\t") %>%
  arrange(desc(Value.Added)) %>%  # redundant here
  mutate(Sector = factor(Sector, levels = rev(.$Sector))) %>%
  grplot(aes(x = Sector, y = Value.Added)) + 
  geom_bar(stat = "identity", width = 0.9, aes(fill = Value.Added > 0)) + 
  scale_fill_manual(values = gpal(2, T)) + 
  scale_y_continuous("Value added (billions)", 
                     label = grattan_dollar) + 
  coord_flip() + 
  annotate("text", 
           x = c(3, 6), 
           y = 15,
           label = c("Negative", "Positive"),
           size = 23/(14/5),
           fontface = "bold",
           color = gpal(2, T)) + 
  theme(panel.grid.major.x = element_line(),
        panel.grid.major.y = element_blank(),
        #
        axis.title.x = element_text(margin = margin(5,1,1,1))) + 
  geom_hline(yintercept = 0, color = "black")
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/bar-chart-signed-color-1}
\newpage
\section{Bar charts facetted}
<<bar-chart-with-facets>>=
read.table(text = "Reliability_level	Solar PV	Battery	Grid
95 per cent	8,200	26,000	0
99 per cent	11,200	41,000	0
99.9 per cent	16,200	56,000	0
Grid-connected	0	0	12,910
", sep = "\t", header = TRUE) %>%
  tidyr::gather(Electricity_source, value, -Reliability_level) %>%
  mutate(value = as.numeric(gsub(",", "", value)),
         is_grid_connected = factor(ifelse(grepl("Grid.connected", Reliability_level),
                                           "Grid-connected",
                                           "Off-grid reliability level"),
                                    levels = c("Off-grid reliability level",
                                               "Grid-connected"))) %>%
  group_by(Reliability_level) %>%
  mutate(text.middle.y = value/2 + cumsum(lag(value, default = 0)),
         text.top.y = ifelse(Electricity_source == first(Electricity_source), 
                             max(cumsum(value)),
                             NA_real_)) %>%


  grplot(aes(x = Reliability_level, y = value, fill = Electricity_source)) + 
  geom_bar(stat = "identity", position = "stack", width = 0.9) + 
  scale_fill_manual(values = rev(gpal(3))) + 
  geom_text(aes(y = text.middle.y, 
                label = ifelse(value > 0,
                               grattan_dollar(value),
                               NA_real_)),
            size = 23/(14/5)) + 
  geom_text(aes(y = text.top.y, label = grattan_dollar(text.top.y)),
            vjust = -0.25,
            size = 23/(14/5)) + 
  # with all the bars marked, no need for y-axis
  theme(axis.text.y = element_blank(), 
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.x = element_blank(),
        panel.grid.major = element_blank(),
        axis.text.x = element_text(margin = margin(1, 1, 5.5, 1))) + 
  scale_y_continuous(expand = c(0,0), limits = c(0, 80e3)) + 
  facet_grid(~is_grid_connected, scales = "free_x", space = "free", switch = "x") + 
  theme(strip.background = element_rect(fill = grey(0.5)))
@
\vfill
\phantom{.}
\includegraphics[width=\columnwidth]{atlas/bar-chart-with-facets-1}
\chapter{Line charts}
\section{Basic time series}
<<line-chart-1-data, include=FALSE>>=
read.table(text="Month	USA	Europe	Japan
Jul-09	3.877323919	7.628384915	8.634828502
Aug-09	3.552166006	7.808694293	8.756570479
Sep-09	3.187013696	7.672679515	9.060864167
Oct-09	4.159281255	7.857063417	9.407799618
Nov-09	3.808467386	8.059211067	9.421331247
Dec-09	5.665411259	8.458201779	10.30612352
Jan-10	6.173123102	9.3549886	10.6519302
Feb-10	5.678579967	9.365501004	11.19603075
Mar-10	4.438555723	9.234065467	10.77479979
Apr-10	4.079497812	7.658160101	11.18172844
May-10	4.636149137	8.109914395	12.7059044
Jun-10	5.328040993	8.600783617	11.64550547
Jul-10	4.876240179	8.473819012	11.9307999
Aug-10	4.571884362	8.973849677	12.0005327
Sep-10	3.824692421	8.112004213	10.80620851
Oct-10	3.329501691	8.043587067	10.79917057
Nov-10	3.670230163	8.458589335	10.67416861
Dec-10	3.948533706	8.144774344	10.01788606
Jan-11	4.288228064	9.17120036	10.92718461
Feb-11	3.797384551	8.722550099	11.20139446
Mar-11	3.639601103	8.587380035	11.45594989
Apr-11	3.686164103	9.001664178	11.28683568
May-11	3.810768298	9.109150039	12.03645942
Jun-11	4.011821891	9.0484266	12.80537566
Jul-11	3.815580155	9.501988604	14.02386307
Aug-11	3.591238525	9.576281718	14.66118986
Sep-11	3.777597116	10.50596691	15.75410891
Oct-11	3.215533237	10.29186927	14.8520145
Nov-11	3.064444604	10.69854984	15.85880444
Dec-11	2.950774434	10.75217104	15.36823754
Jan-12	2.385923784	10.19473349	14.8780783
Feb-12	2.205898465	9.737055782	14.03642124
Mar-12	1.972201125	10.89850306	14.87732163
Apr-12	1.763793054	10.34700605	15.26681715
May-12	2.373216943	11.33348864	16.66918605
Jun-12	2.281705678	10.67807032	15.98457872
Jul-12	2.650240038	10.01431731	16.2946349
Aug-12	2.609567046	10.27902603	16.31036867
Sep-12	2.571813542	10.0283984	15.23266652
Oct-12	3.027427303	10.56779652	13.96263271
Nov-12	3.21233946	10.74108983	13.6193024
Dec-12	3.045834613	10.75322356	14.05489187
Jan-13	3.041703127	10.8157728	14.47873882
Feb-13	3.062936972	10.84886192	15.18103278
Mar-13	3.470045678	10.78257649	14.77948774
Apr-13	3.805883791	11.76550097	14.79822327
May-13	3.971402046	12.0631055	15.92055095
Jun-13	3.906794762	12.17171813	16.96075823
Jul-13	3.792851597	12.15691153	16.94631547
Aug-13	3.626069166	12.32154287	16.51340797
Sep-13	3.675211634	11.44561258	15.22012126
Oct-13	3.666890571	11.34707177	15.2691467
Nov-13	3.787824035	11.902416	16.05054347
Dec-13	4.508977079	12.22490684	17.33714061
Jan-14	5.080524053	12.526224	18.0165793
Feb-14	6.323047424	11.96163526	17.74132805
Mar-14	5.010488064	11.17481707	16.99845796
Apr-14	4.725641386	10.94243123	17.12240637
May-14	4.636850728	10.36621971	16.58595154
Jun-14	4.593871202	9.8227527	15.53918918
Jul-14	4.073060178	9.416012333	14.85502454
", header = TRUE) %>%
readr::write_csv(path = "./Supp-Data/line-chart-1.csv")
@

<<line-chart-1>>=
read_csv("./Supp-Data/line-chart-1.csv") %>%
  tidyr::gather(Country, value, -Month) %>%
  mutate(Date = as.Date(paste0("01-", Month), "%d-%b-%y")) %>%
  group_by(Country) %>%
  mutate(text.label = ifelse(value == max(value), as.character(Country), NA_character_)) %>%
  grplot(aes(x = Date, y = value, color = Country)) + 
  geom_line() +
  geom_text(aes(label = text.label), 
            size = 23/(14/5),
            fontface = "bold",
            vjust = -0.35) + 
  theme(axis.title = element_blank())
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/line-chart-1-1}
\newpage
\section{Line chart with forecast}
<<line-chart-with-forecast>>=
read.table(text="Year 	VIC	NSW	QLD	WA
2003	5.356414724	7.158303299	8.295067397	6.779373035
2004	5.765232407	7.212470457	6.627270564	5.512428448
2005	5.247275775	7.813739286	6.501705246	5.357896217
2006	5.579882397	7.766102172	6.156096264	4.386993275
2007	5.142464026	7.974499497	6.437996373	4.492579222
2008	4.967862882	7.937344521	6.986955138	4.299346541
2009	5.493190785	8.292898991	8.363056636	4.546391753
2010	6.085006168	7.852222696	8.313826172	4.700406152
2011	6.509222847	8.126837463	8.654098243	5.040561095
2012	7.038135416	8.619037843	9.705296782	5.499212089
2013	8.347365139	9.790432725	11.31027881	5.965909091
2014	9.049923004	9.750211753	11.8696421	6.187004075
2015	9.333387206	9.904002678	11.17400215	6.75574023
2016	9.031231241	9.884136122	11.46456268	7.162695011
2017	8.916867397	9.77732708	11.38238887	7.53921181
", header=TRUE) %>%
  tidyr::gather(State, value, -Year) %>%
  mutate(State = factor(State, levels = c("QLD", "NSW", "VIC", "WA"),
                        labels = c("Qld", "NSW", "Vic.", "WA"))) %>%
  mutate(label.text = ifelse(Year == 2014, as.character(State), NA_character_)) %>%
  grplot(aes(x = Year, y = value, color = State)) + 
  geom_line() + 
  geom_text(aes(label = label.text,
                # put labels above if QLD/NSW, else below
                vjust = ifelse(State %in% c("Qld", "NSW"),
                               -0.5, 
                               2.0)), 
            fontface = "bold",
            size = 23/(14/5)) + 
  scale_x_continuous(expand = c(0,0)) +
  annotate("rect", xmin = 2015, xmax = Inf, ymin = -Inf, ymax = Inf, 
           alpha = 0.1) + 
  annotate("text", x = 2016, y = 12.5, label = "Forecast",
           size = 23/(14/5))
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/line-chart-with-forecast-1}
\newpage
\section{Forecast charts}
<<forecasts-chart>>=
read.table(text="Year of forecast	2011	2012	2013	2014	2015	2016	Actual
2009	-2.2						-2.2
2010	-4.4	-4.3					-4.3
2011	-2.9	-3.6	-3.4				-3.4
2012	-0.9	-1.5	-3	-2.9			-2.9
2013	0.1	0.2	0.1	-1.3	-1.2		-1.2
2014	0.3	0.2	0.1	-1.1	-3.1	-3.1	-3.1
2015		0.3	0.3	-0.6	-1.8	-2.6	
2016			0.4	0	-1	-2.1	
2017				0.4	-0.6	-1.5	
2018					-0.2	-0.8	
2019						-0.4	
", sep = "\t", header = TRUE, check.names = FALSE) %>% 
  # the `Year of forecast` refers to the row, not the column:
  tidyr::gather(Year_of_forecast, value, -`Year of forecast`) %>%
  rename(Year_date = `Year of forecast`) %>%
  mutate(Year_of_forecast = factor(Year_of_forecast, levels = c(2011:2016, "Actual"))) %>%
  group_by(Year_of_forecast) %>%
  mutate(Year_of_forecast.label = ifelse(Year_date == max(Year_date[!is.na(value)]),
                                         as.character(Year_of_forecast),
                                         NA_character_)) %>%
  {
    grplot(., aes(x = Year_date, y = value, color = Year_of_forecast)) + 
      # We want to plot actual over the top of the others:
      geom_line(data = filter(., Year_of_forecast != "Actual"),
                linetype = "dashed") +
      geom_line(data = filter(., Year_of_forecast == "Actual"), color = "black") + 
      geom_text(data = filter(., Year_of_forecast != "Actual"),
                aes(label = Year_of_forecast.label), 
                hjust = 0,
                vjust = 0,
                size = 23/(14/5),
                fontface = "bold") + 
      geom_text(data = filter(., Year_of_forecast == "Actual"),
                aes(label = Year_of_forecast.label), 
                hjust = 0,
                size = 23/(14/5),
                color = "black",
                fontface = "bold") + 
      scale_x_continuous(limits = c(2008, 2020),
                         breaks = c(2009, 2014, 2019),
                         expand = c(0,0)) + 
      theme(axis.title.x = element_blank()) + 
      geom_hline(yintercept = 0)
  }
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/forecasts-chart-1}
\newpage
\section{Index charts}
<<index-charts>>=
# generate data
set.seed(1)
data_frame(Date = seq(as.Date("2008-12-01"), as.Date("2013-12-01"),
                      by = "3 months")) %>%
  mutate(Electricity = rnorm(1, 50) + 3 * 1:n() + rnorm(n(), 5, 3),
         Gas = rnorm(1, 50) + 1.5 * 1:n() + rnorm(n(), 5), 3) %>%
  tidyr::gather(Source, value, Electricity:Gas) %>%
  group_by(Source) %>%
  mutate(index = 100*value/first(value),
         index.label = ifelse(value == last(value),
                        round(index), 
                        NA_real_)) %>%
  mutate(Source.label = ifelse(year(Date) == 2013 & month(Date) == 3,
                               as.character(Source),
                               NA_character_)) %>%
{
  grplot(., aes(x = Date, y = index, color = Source)) + 
    geom_line() + 
    scale_color_manual(values = gpal(2, dark = TRUE)) + 
    theme(axis.title.x = element_blank()) + 
    geom_text(aes(label = index.label), 
              hjust = -0.2,
              fontface = "bold",
              size = 23/(14/5)) +
    geom_text(aes(label = Source.label), 
              vjust = 1.5,
              hjust = 0,
              fontface = "bold",
              size = 23/(14/5)) + 
    geom_point(data = filter(ungroup(.), Date == max(Date) | Date == min(Date)),
             size = 5) + 
    annotate("text", x = as.Date("2008-12-01"), y = 100, hjust = 1.2, label = "100",
             fontface = "bold", size = 23/(14/5)) + 
    theme(axis.text.y = element_blank(), axis.text.y = element_blank(),
          panel.grid.major = element_blank(),
          axis.ticks.y = element_blank(), axis.line.y = element_blank()) + 
    scale_x_date(expand = c(0.1, 0.1))
}
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/index-charts-1}
\newpage
\section{Annotating lines}
<<slopes>>=
read.table(text="X.Values	Sydney	Melbourne	Brisbane	Adelaide	Perth	Hobart
0	-1385.805387	-2205.485387	-804.7053865	-500.4753865	-600.6853865	-2318.005387
5	-1065.799914	-1865.530663	-479.686753	-180.5188794	-280.7863761	-1977.94236
10	-745.7999135	-1525.530663	-154.686753	139.4811206	39.21362391	-1637.94236
15	-425.7999135	-1185.530663	170.313247	459.4811206	359.2136239	-1297.94236
20	-105.7999135	-845.5306631	495.313247	779.4811206	679.2136239	-957.9423597
25	214.2000865	-505.5306631	820.313247	1099.481121	999.2136239	-617.9423597
30	534.2000865	-165.5306631	1145.313247	1419.481121	1319.213624	-277.9423597
35	854.2000865	174.4693369	1470.313247	1739.481121	1639.213624	62.05764033
40	1174.200086	514.4693369	1795.313247	2059.481121	1959.213624	402.0576403
45	1494.200086	854.4693369	2120.313247	2379.481121	2279.213624	742.0576403
50	1814.200086	1194.469337	2445.313247	2699.481121	2599.213624	1082.05764
21.65312365	0	-733.118255	602.7662841	885.2810341	785.0135374	-845.5299516
32.43427446	689.9936518	0	1303.541087	1575.274686	1475.007189	-112.4116966
12.3797962	-593.4929567	-1363.704521	0	291.7880774	191.5205808	-1476.116218
7.820607491	-885.2810341	-1673.729354	-296.3472661	0	-100.2674966	-1786.14105
9.387287126	-785.0135374	-1567.195139	-194.5130898	100.2674966	0	-1679.606835
34.08738764	795.7928956	112.4116966	1410.993444	1681.07393	1580.806433	0
", header=TRUE) %>%
  tidyr::gather(City, value, -X.Values) %>%
  filter(City %in% c("Adelaide", "Perth", "Brisbane", "Sydney", "Melbourne")) %>%
  mutate(City = factor(City, levels = c("Adelaide", "Perth", "Brisbane", "Sydney", "Melbourne"))) %>%
  group_by(City) %>%
  mutate(City.label = ifelse(X.Values == max(X.Values),
                             as.character(City),
                             NA_character_)) %>%
  ungroup %>%
  {
    grplot(., aes(x = X.Values, y = value, color = City)) + 
      # coloured lines (i.e. data) should go *over* y = 0, so
      # plot y = 0 first
      geom_hline(yintercept = 0, size = 2, color = "black") + 
      geom_line() + 
      geom_text(aes(label = City.label,
                    # avoid collisions
                    vjust = ifelse(City == "Adelaide",
                                   -0.2, ifelse(City == "Brisbane",
                                             1,
                                             0.5))),
                nudge_x = 0.5,
                hjust = 0,
                fontface = "bold",
                size = 23/(14/5)) + 
      scale_x_continuous(expand = c(0,0), limits = c(0, max(.$X.Values) * 1.2),
                         breaks = 10*(0:5)) + 
      theme(axis.title.x = element_blank()) + 
      annotate("point",
               # ordinarily this would be present in the data
               x = c(7.8275, 9.5, 12.5, 21.75, 32.5),
               y = 0, 
               shape = 21, # hollow point
               stroke = 3,
               fill = "white",
               color = gpal(5),
               size = 4) + 
      annotate("text",
               x = c(7.55, 9.65, 12.875, 21.875, 32.75),
               vjust = 0.5,
               fontface = "bold",
               size = 20/(14/5),
               color = gpal(5),
               y = c(250, 400, -250, -250, -250),
               label = percent(c(8, 9, 12, 22, 32)/100))
  }
@
\vfill
\phantom{.}
\eject
\includegraphics[width=\columnwidth]{atlas/slopes-1}
\end{document}